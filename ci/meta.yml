meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-ucfs-stub
        inputs:
          - name: dataworks-aws-ucfs-stub
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-ucfs-stub
        inputs:
          - name: dataworks-aws-ucfs-stub
          - name: terraform-bootstrap
          - name: dw-al2-hardened-ami
            
    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_al2_hardened_ami_id=$(cat ../dw-al2-hardened-ami/id)
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-ucfs-stub
        inputs:
          - name: dataworks-aws-ucfs-stub
          - name: terraform-bootstrap
          - name: dw-al2-hardened-ami
      params:
        DETAILED_EXITCODE: -detailed-exitcode

    terraform-output:
      task: terraform-output
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          dir: dataworks-aws-ucfs-stub
          args:
            - -exc
            - |
              cp ../terraform-bootstrap/terraform.tf .
              terraform init
              terraform workspace show
              terraform output export_server_asg | grep "\"name\" = " | awk '{print $3}' | sed 's/"//g' > ../export-server-asg/name
        inputs:
          - name: dataworks-aws-ucfs-stub
          - name: terraform-bootstrap
        outputs:
          - name: export-server-asg

    scale-up:
      task: scale-up
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: export-server-asg
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export ASG_NAME=$(cat export-server-asg/name)
              echo "Scaling up ${ASG_NAME} to 1..."
              ASG_SCALING=$(aws autoscaling set-desired-capacity --auto-scaling-group-name ${ASG_NAME} --desired-capacity 1)
              if $ASG_SCALING; then
                echo "Scaling successful."
              else
                echo "Scaling failed."
              fi

    scale-down:
      task: scale-down
      .: (( inject meta.plan.terraform-common-config ))
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        inputs:
          - name: export-server-asg
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export ASG_NAME=$(cat export-server-asg/name)
              echo "Scaling down ${ASG_NAME} to 0..."
              ASG_SCALING=$(aws autoscaling set-desired-capacity --auto-scaling-group-name ${ASG_NAME} --desired-capacity 0)
              if $ASG_SCALING; then
                echo "Scaling successful."
              else
                echo "Scaling failed."
              fi

    build-python3-8:
      task: build-python3-8
      privileged: true
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))    
        run:
          dir: dataworks-aws-ucfs-stub
          path: sh
          args: 
            - -exc 
            - |
              export PATH=$PATH:/dataworks-aws-ucfs-stub
              build
        inputs: 
          - name: dataworks-aws-ucfs-stub
          # - name: python38-docker-image
            # path: .
        outputs:
          - name: python3-8-image
        params:
          CONTEXT: dataworks-aws-ucfs-stub
          UNPACK_ROOTFS: true

